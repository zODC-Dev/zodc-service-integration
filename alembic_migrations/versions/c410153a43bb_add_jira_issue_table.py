"""add jira_issue table

Revision ID: c410153a43bb
Revises: 4b92c0bcbc64
Create Date: 2025-03-19 21:06:38.573296

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'c410153a43bb'
down_revision: Union[str, None] = '4b92c0bcbc64'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Then convert the column to integer using explicit USING clause
    op.add_column('jira_issues', sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('jira_issues', sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('jira_issues', sa.Column('priority_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column('jira_issues', sa.Column('estimate_point', sa.Float(), nullable=False))
    op.add_column('jira_issues', sa.Column('actual_point', sa.Float(), nullable=True))
    op.execute("UPDATE jira_issues SET assignee_id = '0' WHERE assignee_id IS NULL")
    op.execute("ALTER TABLE jira_issues ALTER COLUMN assignee_id TYPE INTEGER USING assignee_id::INTEGER")
    op.execute("ALTER TABLE jira_issues ALTER COLUMN reporter_id TYPE INTEGER USING reporter_id::INTEGER")
    op.alter_column('jira_issues', 'assignee_id',
                    existing_type=sa.VARCHAR(),
                    type_=sa.VARCHAR(length=255),
                    existing_nullable=True)
    op.alter_column('jira_issues', 'reporter_id',
                    existing_type=sa.VARCHAR(),
                    type_=sa.VARCHAR(length=255),
                    nullable=True)
    op.drop_index('ix_jira_issues_jira_issue_id', table_name='jira_issues')
    # Add unique constraint to jira_account_id
    op.create_unique_constraint(
        "uq_users_jira_account_id",
        "users",
        ["jira_account_id"]
    )

    op.create_index(op.f('ix_jira_issues_jira_issue_id'), 'jira_issues', ['jira_issue_id'], unique=False)
    op.create_foreign_key(None, 'jira_issues', 'users', ['reporter_id'], ['jira_account_id'])
    op.create_foreign_key(None, 'jira_issues', 'users', ['assignee_id'], ['jira_account_id'])
    op.drop_column('jira_issues', 'priority')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('jira_issues', sa.Column('priority', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'jira_issues', type_='foreignkey')
    op.drop_constraint(None, 'jira_issues', type_='foreignkey')
    op.drop_index(op.f('ix_jira_issues_jira_issue_id'), table_name='jira_issues')
    op.create_index('ix_jira_issues_jira_issue_id', 'jira_issues', ['jira_issue_id'], unique=True)
    op.alter_column('jira_issues', 'reporter_id',
                    existing_type=sa.Integer(),
                    type_=sa.VARCHAR(),
                    nullable=False)
    op.alter_column('jira_issues', 'assignee_id',
                    existing_type=sa.Integer(),
                    type_=sa.VARCHAR(),
                    existing_nullable=True)
    op.drop_column('jira_issues', 'actual_point')
    op.drop_column('jira_issues', 'estimate_point')
    op.drop_column('jira_issues', 'priority_id')
    op.drop_column('jira_issues', 'type')
    op.drop_column('jira_issues', 'key')
    # ### end Alembic commands ###
